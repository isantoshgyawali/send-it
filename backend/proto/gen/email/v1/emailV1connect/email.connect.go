// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: email/v1/email.proto

package emailV1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/isantoshgyawali/sendit/proto/gen/email/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EmailServiceName is the fully-qualified name of the EmailService service.
	EmailServiceName = "email.v1.EmailService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EmailServiceEmailProcedure is the fully-qualified name of the EmailService's Email RPC.
	EmailServiceEmailProcedure = "/email.v1.EmailService/Email"
	// EmailServiceCancelScheduleProcedure is the fully-qualified name of the EmailService's
	// CancelSchedule RPC.
	EmailServiceCancelScheduleProcedure = "/email.v1.EmailService/CancelSchedule"
)

// EmailServiceClient is a client for the email.v1.EmailService service.
type EmailServiceClient interface {
	Email(context.Context, *connect.Request[v1.EmailRequest]) (*connect.Response[v1.EmailResponse], error)
	CancelSchedule(context.Context, *connect.Request[v1.CancelScheduleRequest]) (*connect.Response[v1.CancelScheduleResponse], error)
}

// NewEmailServiceClient constructs a client for the email.v1.EmailService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEmailServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EmailServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	emailServiceMethods := v1.File_email_v1_email_proto.Services().ByName("EmailService").Methods()
	return &emailServiceClient{
		email: connect.NewClient[v1.EmailRequest, v1.EmailResponse](
			httpClient,
			baseURL+EmailServiceEmailProcedure,
			connect.WithSchema(emailServiceMethods.ByName("Email")),
			connect.WithClientOptions(opts...),
		),
		cancelSchedule: connect.NewClient[v1.CancelScheduleRequest, v1.CancelScheduleResponse](
			httpClient,
			baseURL+EmailServiceCancelScheduleProcedure,
			connect.WithSchema(emailServiceMethods.ByName("CancelSchedule")),
			connect.WithClientOptions(opts...),
		),
	}
}

// emailServiceClient implements EmailServiceClient.
type emailServiceClient struct {
	email          *connect.Client[v1.EmailRequest, v1.EmailResponse]
	cancelSchedule *connect.Client[v1.CancelScheduleRequest, v1.CancelScheduleResponse]
}

// Email calls email.v1.EmailService.Email.
func (c *emailServiceClient) Email(ctx context.Context, req *connect.Request[v1.EmailRequest]) (*connect.Response[v1.EmailResponse], error) {
	return c.email.CallUnary(ctx, req)
}

// CancelSchedule calls email.v1.EmailService.CancelSchedule.
func (c *emailServiceClient) CancelSchedule(ctx context.Context, req *connect.Request[v1.CancelScheduleRequest]) (*connect.Response[v1.CancelScheduleResponse], error) {
	return c.cancelSchedule.CallUnary(ctx, req)
}

// EmailServiceHandler is an implementation of the email.v1.EmailService service.
type EmailServiceHandler interface {
	Email(context.Context, *connect.Request[v1.EmailRequest]) (*connect.Response[v1.EmailResponse], error)
	CancelSchedule(context.Context, *connect.Request[v1.CancelScheduleRequest]) (*connect.Response[v1.CancelScheduleResponse], error)
}

// NewEmailServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEmailServiceHandler(svc EmailServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	emailServiceMethods := v1.File_email_v1_email_proto.Services().ByName("EmailService").Methods()
	emailServiceEmailHandler := connect.NewUnaryHandler(
		EmailServiceEmailProcedure,
		svc.Email,
		connect.WithSchema(emailServiceMethods.ByName("Email")),
		connect.WithHandlerOptions(opts...),
	)
	emailServiceCancelScheduleHandler := connect.NewUnaryHandler(
		EmailServiceCancelScheduleProcedure,
		svc.CancelSchedule,
		connect.WithSchema(emailServiceMethods.ByName("CancelSchedule")),
		connect.WithHandlerOptions(opts...),
	)
	return "/email.v1.EmailService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EmailServiceEmailProcedure:
			emailServiceEmailHandler.ServeHTTP(w, r)
		case EmailServiceCancelScheduleProcedure:
			emailServiceCancelScheduleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEmailServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEmailServiceHandler struct{}

func (UnimplementedEmailServiceHandler) Email(context.Context, *connect.Request[v1.EmailRequest]) (*connect.Response[v1.EmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("email.v1.EmailService.Email is not implemented"))
}

func (UnimplementedEmailServiceHandler) CancelSchedule(context.Context, *connect.Request[v1.CancelScheduleRequest]) (*connect.Response[v1.CancelScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("email.v1.EmailService.CancelSchedule is not implemented"))
}
